import math

class Proper_fraction():
    """Класс по работе с правильными дробями"""

    def __init__(self, x, y):
        """Свойства дроби"""
        self.r = math.gcd(x, y)
        self.numenator = x // self.r
        self.denominator = y // self.r

    def __str__(self):
        """Cоздание строк из данных свойства дроби в строку с конкатенацией этих строк с помощью символа / между ними"""
        return str(self.numenator) + "/" + str(self.denominator)

    def __add__(self, value):
        """Сложение"""
        newnum = self.numenator * value.denominator + self.denominator * value.numenator
        newden = self.denominator * value.denominator
        return Proper_fraction(newnum, newden)

    def __sub__(self, value):
        """Вычитание"""
        newnum = self.numenator * value.denominator - value.numenator * self.denominator
        newden = self.denominator * value.denominator
        return Proper_fraction(newnum, newden)

    def __mul__(self, value):
        """Умножение"""
        newnum = self.numenator * value.numenator
        newden = self.denominator * value.denominator
        return Proper_fraction(newnum, newden)

    def __truediv__(self, value):
        """Деление"""
        newnum = self.numenator * value.denominator
        newden = self.denominator * value.numenator
        return Proper_fraction(newnum, newden)

class fraction_extending (Proper_fraction):
    """Расширенный класс дроби"""
    def __init__(self,x,y,exponent=0):
        super().__init__(x, y)
        self.exponent = exponent

    def pow_fraction(self):
         """Возведение в степень"""
         number = self.numenator/self.denominator
         degree = math.pow(number, float(self.exponent))
         return degree



Value1 = Proper_fraction(12,20)
Value2 = Proper_fraction(12,20)

ext = fraction_extending(12,20,2)

print(ext.pow_fraction())
